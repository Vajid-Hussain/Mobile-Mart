// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/repository/interface/payment.go

// Package mockRepository is a generated GoMock package.
package mockRepository

import (
	reflect "reflect"

	requestmodel "github.com/Vajid-Hussain/Mobile-Mart-ecommerce/pkg/models/requestModel"
	responsemodel "github.com/Vajid-Hussain/Mobile-Mart-ecommerce/pkg/models/responseModel"
	gomock "github.com/golang/mock/gomock"
)

// MockIPaymentRepository is a mock of IPaymentRepository interface.
type MockIPaymentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIPaymentRepositoryMockRecorder
}

// MockIPaymentRepositoryMockRecorder is the mock recorder for MockIPaymentRepository.
type MockIPaymentRepositoryMockRecorder struct {
	mock *MockIPaymentRepository
}

// NewMockIPaymentRepository creates a new mock instance.
func NewMockIPaymentRepository(ctrl *gomock.Controller) *MockIPaymentRepository {
	mock := &MockIPaymentRepository{ctrl: ctrl}
	mock.recorder = &MockIPaymentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPaymentRepository) EXPECT() *MockIPaymentRepositoryMockRecorder {
	return m.recorder
}

// CreateOrUpdateWallet mocks base method.
func (m *MockIPaymentRepository) CreateOrUpdateWallet(arg0 string, arg1 uint) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateWallet", arg0, arg1)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateWallet indicates an expected call of CreateOrUpdateWallet.
func (mr *MockIPaymentRepositoryMockRecorder) CreateOrUpdateWallet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateWallet", reflect.TypeOf((*MockIPaymentRepository)(nil).CreateOrUpdateWallet), arg0, arg1)
}

// GetFinalPriceByorderID mocks base method.
func (m *MockIPaymentRepository) GetFinalPriceByorderID(arg0 string) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFinalPriceByorderID", arg0)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFinalPriceByorderID indicates an expected call of GetFinalPriceByorderID.
func (mr *MockIPaymentRepositoryMockRecorder) GetFinalPriceByorderID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFinalPriceByorderID", reflect.TypeOf((*MockIPaymentRepository)(nil).GetFinalPriceByorderID), arg0)
}

// GetWallet mocks base method.
func (m *MockIPaymentRepository) GetWallet(arg0 string) (*responsemodel.UserWallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWallet", arg0)
	ret0, _ := ret[0].(*responsemodel.UserWallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWallet indicates an expected call of GetWallet.
func (mr *MockIPaymentRepositoryMockRecorder) GetWallet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWallet", reflect.TypeOf((*MockIPaymentRepository)(nil).GetWallet), arg0)
}

// GetWalletTransaction mocks base method.
func (m *MockIPaymentRepository) GetWalletTransaction(arg0 string) (*[]responsemodel.WalletTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletTransaction", arg0)
	ret0, _ := ret[0].(*[]responsemodel.WalletTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletTransaction indicates an expected call of GetWalletTransaction.
func (mr *MockIPaymentRepositoryMockRecorder) GetWalletTransaction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletTransaction", reflect.TypeOf((*MockIPaymentRepository)(nil).GetWalletTransaction), arg0)
}

// GetWalletbalance mocks base method.
func (m *MockIPaymentRepository) GetWalletbalance(userID string) (*uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletbalance", userID)
	ret0, _ := ret[0].(*uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletbalance indicates an expected call of GetWalletbalance.
func (mr *MockIPaymentRepositoryMockRecorder) GetWalletbalance(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletbalance", reflect.TypeOf((*MockIPaymentRepository)(nil).GetWalletbalance), userID)
}

// OnlinePayment mocks base method.
func (m *MockIPaymentRepository) OnlinePayment(arg0, arg1 string) (*responsemodel.OnlinePayment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnlinePayment", arg0, arg1)
	ret0, _ := ret[0].(*responsemodel.OnlinePayment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OnlinePayment indicates an expected call of OnlinePayment.
func (mr *MockIPaymentRepositoryMockRecorder) OnlinePayment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnlinePayment", reflect.TypeOf((*MockIPaymentRepository)(nil).OnlinePayment), arg0, arg1)
}

// UpdateOnlinePaymentSucess mocks base method.
func (m *MockIPaymentRepository) UpdateOnlinePaymentSucess(arg0 string) (*[]responsemodel.OrderDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOnlinePaymentSucess", arg0)
	ret0, _ := ret[0].(*[]responsemodel.OrderDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOnlinePaymentSucess indicates an expected call of UpdateOnlinePaymentSucess.
func (mr *MockIPaymentRepositoryMockRecorder) UpdateOnlinePaymentSucess(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOnlinePaymentSucess", reflect.TypeOf((*MockIPaymentRepository)(nil).UpdateOnlinePaymentSucess), arg0)
}

// UpdateWalletReduceBalance mocks base method.
func (m *MockIPaymentRepository) UpdateWalletReduceBalance(arg0 string, arg1 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWalletReduceBalance", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWalletReduceBalance indicates an expected call of UpdateWalletReduceBalance.
func (mr *MockIPaymentRepositoryMockRecorder) UpdateWalletReduceBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWalletReduceBalance", reflect.TypeOf((*MockIPaymentRepository)(nil).UpdateWalletReduceBalance), arg0, arg1)
}

// WalletTransaction mocks base method.
func (m *MockIPaymentRepository) WalletTransaction(arg0 requestmodel.WalletTransaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WalletTransaction", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WalletTransaction indicates an expected call of WalletTransaction.
func (mr *MockIPaymentRepositoryMockRecorder) WalletTransaction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalletTransaction", reflect.TypeOf((*MockIPaymentRepository)(nil).WalletTransaction), arg0)
}
