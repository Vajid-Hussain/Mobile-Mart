// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/repository/interface/user.go

// Package mockRepository is a generated GoMock package.
package mockRepository

import (
	reflect "reflect"

	requestmodel "github.com/Vajid-Hussain/Mobile-Mart-ecommerce/pkg/models/requestModel"
	responsemodel "github.com/Vajid-Hussain/Mobile-Mart-ecommerce/pkg/models/responseModel"
	gomock "github.com/golang/mock/gomock"
)

// MockIUserRepo is a mock of IUserRepo interface.
type MockIUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIUserRepoMockRecorder
}

// MockIUserRepoMockRecorder is the mock recorder for MockIUserRepo.
type MockIUserRepoMockRecorder struct {
	mock *MockIUserRepo
}

// NewMockIUserRepo creates a new mock instance.
func NewMockIUserRepo(ctrl *gomock.Controller) *MockIUserRepo {
	mock := &MockIUserRepo{ctrl: ctrl}
	mock.recorder = &MockIUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserRepo) EXPECT() *MockIUserRepoMockRecorder {
	return m.recorder
}

// AllUsers mocks base method.
func (m *MockIUserRepo) AllUsers(arg0, arg1 int) (*[]responsemodel.UserDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllUsers", arg0, arg1)
	ret0, _ := ret[0].(*[]responsemodel.UserDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllUsers indicates an expected call of AllUsers.
func (mr *MockIUserRepoMockRecorder) AllUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllUsers", reflect.TypeOf((*MockIUserRepo)(nil).AllUsers), arg0, arg1)
}

// BlockUser mocks base method.
func (m *MockIUserRepo) BlockUser(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// BlockUser indicates an expected call of BlockUser.
func (mr *MockIUserRepoMockRecorder) BlockUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockUser", reflect.TypeOf((*MockIUserRepo)(nil).BlockUser), arg0)
}

// ChangeUserStatusActive mocks base method.
func (m *MockIUserRepo) ChangeUserStatusActive(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserStatusActive", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeUserStatusActive indicates an expected call of ChangeUserStatusActive.
func (mr *MockIUserRepoMockRecorder) ChangeUserStatusActive(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserStatusActive", reflect.TypeOf((*MockIUserRepo)(nil).ChangeUserStatusActive), arg0)
}

// CheckReferalCodeExist mocks base method.
func (m *MockIUserRepo) CheckReferalCodeExist(arg0 string) (uint, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckReferalCodeExist", arg0)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckReferalCodeExist indicates an expected call of CheckReferalCodeExist.
func (mr *MockIUserRepoMockRecorder) CheckReferalCodeExist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckReferalCodeExist", reflect.TypeOf((*MockIUserRepo)(nil).CheckReferalCodeExist), arg0)
}

// CreateAddress mocks base method.
func (m *MockIUserRepo) CreateAddress(arg0 *requestmodel.Address) (*requestmodel.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAddress", arg0)
	ret0, _ := ret[0].(*requestmodel.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAddress indicates an expected call of CreateAddress.
func (mr *MockIUserRepoMockRecorder) CreateAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAddress", reflect.TypeOf((*MockIUserRepo)(nil).CreateAddress), arg0)
}

// CreateUser mocks base method.
func (m *MockIUserRepo) CreateUser(arg0 *requestmodel.UserDetails) (*responsemodel.SignupData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(*responsemodel.SignupData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIUserRepoMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIUserRepo)(nil).CreateUser), arg0)
}

// DeleteAddress mocks base method.
func (m *MockIUserRepo) DeleteAddress(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAddress", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAddress indicates an expected call of DeleteAddress.
func (mr *MockIUserRepoMockRecorder) DeleteAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAddress", reflect.TypeOf((*MockIUserRepo)(nil).DeleteAddress), arg0, arg1)
}

// FetchPasswordUsingPhone mocks base method.
func (m *MockIUserRepo) FetchPasswordUsingPhone(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchPasswordUsingPhone", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchPasswordUsingPhone indicates an expected call of FetchPasswordUsingPhone.
func (mr *MockIUserRepoMockRecorder) FetchPasswordUsingPhone(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchPasswordUsingPhone", reflect.TypeOf((*MockIUserRepo)(nil).FetchPasswordUsingPhone), arg0)
}

// FetchUserID mocks base method.
func (m *MockIUserRepo) FetchUserID(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUserID", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUserID indicates an expected call of FetchUserID.
func (mr *MockIUserRepoMockRecorder) FetchUserID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUserID", reflect.TypeOf((*MockIUserRepo)(nil).FetchUserID), arg0)
}

// GetAAddress mocks base method.
func (m *MockIUserRepo) GetAAddress(arg0 string) (*requestmodel.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAAddress", arg0)
	ret0, _ := ret[0].(*requestmodel.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAAddress indicates an expected call of GetAAddress.
func (mr *MockIUserRepoMockRecorder) GetAAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAAddress", reflect.TypeOf((*MockIUserRepo)(nil).GetAAddress), arg0)
}

// GetAddress mocks base method.
func (m *MockIUserRepo) GetAddress(arg0 string, arg1, arg2 int) (*[]requestmodel.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddress", arg0, arg1, arg2)
	ret0, _ := ret[0].(*[]requestmodel.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddress indicates an expected call of GetAddress.
func (mr *MockIUserRepoMockRecorder) GetAddress(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddress", reflect.TypeOf((*MockIUserRepo)(nil).GetAddress), arg0, arg1, arg2)
}

// GetProfile mocks base method.
func (m *MockIUserRepo) GetProfile(arg0 string) (*requestmodel.UserDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", arg0)
	ret0, _ := ret[0].(*requestmodel.UserDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockIUserRepoMockRecorder) GetProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockIUserRepo)(nil).GetProfile), arg0)
}

// IsUserExist mocks base method.
func (m *MockIUserRepo) IsUserExist(arg0 string) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserExist", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// IsUserExist indicates an expected call of IsUserExist.
func (mr *MockIUserRepoMockRecorder) IsUserExist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserExist", reflect.TypeOf((*MockIUserRepo)(nil).IsUserExist), arg0)
}

// UnblockUser mocks base method.
func (m *MockIUserRepo) UnblockUser(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnblockUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnblockUser indicates an expected call of UnblockUser.
func (mr *MockIUserRepoMockRecorder) UnblockUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnblockUser", reflect.TypeOf((*MockIUserRepo)(nil).UnblockUser), arg0)
}

// UpdateAddress mocks base method.
func (m *MockIUserRepo) UpdateAddress(arg0 *requestmodel.EditAddress) (*requestmodel.EditAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAddress", arg0)
	ret0, _ := ret[0].(*requestmodel.EditAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAddress indicates an expected call of UpdateAddress.
func (mr *MockIUserRepoMockRecorder) UpdateAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAddress", reflect.TypeOf((*MockIUserRepo)(nil).UpdateAddress), arg0)
}

// UpdatePassword mocks base method.
func (m *MockIUserRepo) UpdatePassword(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockIUserRepoMockRecorder) UpdatePassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockIUserRepo)(nil).UpdatePassword), arg0, arg1)
}

// UpdateProfile mocks base method.
func (m *MockIUserRepo) UpdateProfile(arg0 *requestmodel.UserDetails) (*requestmodel.UserDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", arg0)
	ret0, _ := ret[0].(*requestmodel.UserDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockIUserRepoMockRecorder) UpdateProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockIUserRepo)(nil).UpdateProfile), arg0)
}

// UserCount mocks base method.
func (m *MockIUserRepo) UserCount(arg0 chan int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UserCount", arg0)
}

// UserCount indicates an expected call of UserCount.
func (mr *MockIUserRepoMockRecorder) UserCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCount", reflect.TypeOf((*MockIUserRepo)(nil).UserCount), arg0)
}
