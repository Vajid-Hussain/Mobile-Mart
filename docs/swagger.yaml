definitions:
  requestmodel.Address:
    properties:
      addressID:
        type: string
      city:
        type: string
      firstName:
        type: string
      landmark:
        type: string
      lastName:
        type: string
      phoneNumber:
        type: string
      pincode:
        minLength: 6
        type: string
      state:
        type: string
      street:
        type: string
      userid:
        type: string
    required:
    - city
    - firstName
    - landmark
    - phoneNumber
    - state
    - street
    type: object
  requestmodel.AdminLoginData:
    properties:
      email:
        type: string
      password:
        minLength: 4
        type: string
    type: object
  requestmodel.Brand:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  requestmodel.BrandDetails:
    properties:
      id:
        type: string
      name:
        type: string
    required:
    - id
    - name
    type: object
  requestmodel.Cart:
    properties:
      inventoryid:
        type: string
    required:
    - inventoryid
    type: object
  requestmodel.Category:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  requestmodel.CategoryDetails:
    properties:
      id:
        type: string
      name:
        type: string
    required:
    - id
    - name
    type: object
  requestmodel.CategoryOffer:
    properties:
      category_discount:
        maximum: 99
        minimum: 1
        type: integer
      category_id:
        type: string
      seller_id:
        type: string
      title:
        type: string
      validity:
        minimum: 0
        type: integer
    required:
    - category_discount
    - category_id
    - title
    - validity
    type: object
  requestmodel.Coupon:
    properties:
      discount:
        maximum: 100
        minimum: 1
        type: integer
      expire_date:
        minimum: 1
        type: integer
      maximum_allowed:
        type: integer
      minimum_required:
        minimum: 0
        type: integer
      name:
        type: string
      type:
        type: string
    required:
    - name
    - type
    type: object
  requestmodel.EditAddress:
    properties:
      addressID:
        type: string
      city:
        type: string
      firstName:
        type: string
      landmark:
        type: string
      lastName:
        type: string
      phoneNumber:
        type: string
      pincode:
        minLength: 6
        type: string
      state:
        type: string
      street:
        type: string
    required:
    - addressID
    - city
    - firstName
    - landmark
    - lastName
    - phoneNumber
    - pincode
    - state
    - street
    type: object
  requestmodel.EditCategoryOffer:
    properties:
      category_discount:
        maximum: 99
        minimum: 1
        type: integer
      id:
        type: string
      sellerID:
        type: string
      title:
        type: string
      validity:
        type: integer
    required:
    - category_discount
    - title
    type: object
  requestmodel.EditInventory:
    properties:
      discount:
        maximum: 99
        minimum: 0
        type: integer
      id:
        type: string
      mrp:
        minimum: 0
        type: integer
      units:
        minimum: 0
        type: integer
    required:
    - discount
    - id
    - mrp
    - units
    type: object
  requestmodel.ForgotPassword:
    properties:
      confirmpassword:
        type: string
      otp:
        type: string
      password:
        minLength: 4
        type: string
    type: object
  requestmodel.OnlinePaymentVerification:
    properties:
      order_id:
        type: string
      payment_id:
        type: string
      signature:
        type: string
    required:
    - order_id
    - payment_id
    - signature
    type: object
  requestmodel.Order:
    properties:
      address:
        type: string
      coupon:
        type: string
      payment:
        type: string
    required:
    - address
    - payment
    type: object
  requestmodel.OtpVerification:
    properties:
      otp:
        type: string
    type: object
  requestmodel.SellerEditProfile:
    properties:
      confirmpassword:
        type: string
      description:
        description: GST_NO          string `json:"gstno,omitempty"           validate:"required,len=15"`
        type: string
      email:
        type: string
      name:
        type: string
      password:
        minLength: 4
        type: string
    required:
    - confirmpassword
    - description
    - email
    - name
    - password
    type: object
  requestmodel.SellerLogin:
    properties:
      email:
        type: string
      password:
        minLength: 4
        type: string
    type: object
  requestmodel.SellerSignup:
    properties:
      confirmpassword:
        type: string
      description:
        type: string
      email:
        type: string
      gstno:
        type: string
      name:
        type: string
      password:
        minLength: 4
        type: string
    required:
    - description
    - name
    type: object
  requestmodel.SendOtp:
    properties:
      phone:
        type: string
    type: object
  requestmodel.UserDetails:
    properties:
      confirmpassword:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      password:
        minLength: 4
        type: string
      phone:
        type: string
      referalCode:
        type: string
    required:
    - name
    type: object
  requestmodel.UserEditProfile:
    properties:
      email:
        type: string
      name:
        type: string
      phone:
        type: string
      userid:
        type: string
    required:
    - email
    - name
    - phone
    - userid
    type: object
  requestmodel.UserLogin:
    properties:
      password:
        minLength: 4
        type: string
      phone:
        type: string
    required:
    - password
    type: object
  response.Response:
    properties:
      error: {}
      message:
        type: string
      result: {}
      status_code:
        type: integer
    type: object
  responsemodel.SignupData:
    properties:
      email:
        type: string
      isUserExist:
        type: string
      name:
        type: string
      otp:
        type: string
      phone:
        type: string
      referalCode:
        type: string
      token:
        type: string
      userID:
        type: string
      walletBelance:
        type: integer
    type: object
info:
  contact:
    name: API Support
  description: "Mobile Mart - Your Ultimate Mobile Phone Shopping API \U0001F4F1\U0001F6D2"
  title: Go + Gin Mobile-Mart
paths:
  /:
    get:
      consumes:
      - application/json
      description: Retrieve a list of products.
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 5
        description: Number of items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved products
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get Available Products
      tags:
      - User
  /accesstoken:
    get:
      consumes:
      - application/json
      description: Verify the validity of an access token.
      parameters:
      - description: Access token to be verified
        in: query
        name: accesstoken
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Access token is valid
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request. Please provide a valid access token.
          schema:
            $ref: '#/definitions/response.Response'
      summary: Verify Access Token (User)
      tags:
      - User
  /address:
    delete:
      consumes:
      - application/json
      description: Delete an address by ID.
      parameters:
      - description: Address ID in the query parameter
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted the address
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      - Refreshtoken: []
      summary: Delete Address
      tags:
      - User Addresses
    get:
      consumes:
      - application/json
      description: Retrieve a list of addresses.
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 5
        description: Number of items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved addresses
          schema:
            items:
              $ref: '#/definitions/requestmodel.Address'
            type: array
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      - Refreshtoken: []
      summary: Get Addresses
      tags:
      - User Addresses
    patch:
      consumes:
      - application/json
      description: Update an existing address.
      parameters:
      - description: Updated address information
        in: body
        name: address
        required: true
        schema:
          $ref: '#/definitions/requestmodel.EditAddress'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated the address
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      - Refreshtoken: []
      summary: Update Address
      tags:
      - User Addresses
    post:
      consumes:
      - application/json
      description: Add a new address.
      parameters:
      - description: Address object to be added
        in: body
        name: address
        required: true
        schema:
          $ref: '#/definitions/requestmodel.Address'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully added the address
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      - Refreshtoken: []
      summary: Add Address
      tags:
      - User Addresses
  /admin:
    get:
      consumes:
      - application/json
      description: Retrieve details for the admin.
      produces:
      - application/json
      responses:
        "200":
          description: Admin details retrieved successfully
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized. Authentication required.
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Get Dashbord Details
      tags:
      - Admins
  /admin/brand:
    delete:
      consumes:
      - application/json
      description: Delete an existing brand using this handler.
      parameters:
      - description: ID of the brand to delete
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Brand deleted successfully
        "400":
          description: Invalid input or validation error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      - Refreshtoken: []
      summary: Delete a Brand by ID
      tags:
      - Brand
    get:
      consumes:
      - application/json
      description: Get a paginated list of brands using this handler.
      parameters:
      - default: 1
        description: Page number for pagination (default 1)
        in: query
        name: page
        required: true
        type: integer
      - default: 5
        description: Number of items to return per page (default 5)
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Paginated list of brands
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid input or validation error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Get Paginated List of Brands
      tags:
      - Brand
    patch:
      consumes:
      - application/json
      description: Edit an existing brand using this handler.
      parameters:
      - description: Updated name of the brand
        in: body
        name: name
        required: true
        schema:
          $ref: '#/definitions/requestmodel.BrandDetails'
      produces:
      - application/json
      responses:
        "200":
          description: Brand edited successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid input or validation error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Edit a Brand by ID
      tags:
      - Brand
    post:
      consumes:
      - application/json
      description: Create a new brand using this handler.
      parameters:
      - description: Name of the brand
        in: body
        name: Brand
        required: true
        schema:
          $ref: '#/definitions/requestmodel.Brand'
      produces:
      - application/json
      responses:
        "201":
          description: Brand created successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid input or validation error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Create a Brand
      tags:
      - Brand
  /admin/category:
    delete:
      consumes:
      - application/json
      description: Delete an existing category using this handler.
      parameters:
      - description: ID of the category to delete
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Category deleted successfully
        "400":
          description: Invalid input or validation error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Delete a Category by ID
      tags:
      - Category
    get:
      consumes:
      - application/json
      description: Using this handler, admin can get a list of all categories
      parameters:
      - default: 1
        description: Page number for pagination (default 1)
        in: query
        name: page
        required: true
        type: integer
      - default: 5
        description: Number of items to return per page (default 5)
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Get All Categories
      tags:
      - Category
    patch:
      consumes:
      - application/json
      description: Edit an existing category using this handler.
      parameters:
      - description: Updated category
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/requestmodel.CategoryDetails'
      produces:
      - application/json
      responses:
        "200":
          description: Category edited successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid input or validation error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Edit a Category by ID
      tags:
      - Category
    post:
      consumes:
      - application/json
      description: Using this handler, admin can add a new category
      parameters:
      - description: Details of the category
        in: body
        name: Details
        required: true
        schema:
          $ref: '#/definitions/requestmodel.Category'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Add Category
      tags:
      - Category
  /admin/coupon:
    get:
      consumes:
      - application/json
      description: Retrieve a list of coupons for the admin.
      produces:
      - application/json
      responses:
        "200":
          description: Coupons retrieved successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request. Unable to retrieve coupons.
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Get Coupons (Admin)
      tags:
      - Admin Coupons
    post:
      consumes:
      - application/json
      description: Create a new coupon by the admin.
      parameters:
      - description: Coupon details to be created
        in: body
        name: coupon
        required: true
        schema:
          $ref: '#/definitions/requestmodel.Coupon'
      produces:
      - application/json
      responses:
        "201":
          description: Coupon created successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request. Unable to create the coupon.
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Create Coupon (Admin)
      tags:
      - Admin Coupons
  /admin/coupon/block:
    patch:
      consumes:
      - application/json
      description: Block a coupon by the admin.
      parameters:
      - description: ID of the coupon to be blocked
        in: query
        name: couponID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Coupon blocked successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request. Please provide a valid coupon ID.
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Block Coupon (Admin)
      tags:
      - Admin Coupons
  /admin/coupon/unblock:
    patch:
      consumes:
      - application/json
      description: Unblock a coupon by the admin.
      parameters:
      - description: ID of the coupon to be unblocked
        in: query
        name: couponID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Coupon unblocked successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request. Please provide a valid coupon ID.
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Unblock Coupon (Admin)
      tags:
      - Admin Coupons
  /admin/login/:
    post:
      consumes:
      - application/json
      description: using this handler admins can login
      parameters:
      - description: Admin login details
        in: body
        name: admin
        required: true
        schema:
          $ref: '#/definitions/requestmodel.AdminLoginData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Admin login
      tags:
      - Admins
  /admin/sellers/block:
    patch:
      consumes:
      - application/json
      description: Using this handler, admin can block a seller
      parameters:
      - description: Seller ID in the URL path
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Block Seller
      tags:
      - Admins
  /admin/sellers/getsellers:
    get:
      consumes:
      - application/json
      description: Using this handler, admin can get a list of sellers
      parameters:
      - default: 1
        description: Page number for pagination (default 1)
        in: query
        name: page
        required: true
        type: integer
      - default: 5
        description: Number of items to return per page (default 5)
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Get Sellers
      tags:
      - Admins
  /admin/sellers/pending:
    get:
      consumes:
      - application/json
      description: Using this handler, admin can get a list of pending sellers
      parameters:
      - default: 1
        description: Page number for pagination (default 1)
        in: query
        name: page
        required: true
        type: integer
      - default: 5
        description: Number of items to return per page (default 5)
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Get Pending Sellers
      tags:
      - Admins
  /admin/sellers/singleview:
    get:
      consumes:
      - application/json
      description: Using this handler, admin can get details of a single seller
      parameters:
      - description: Seller ID in the URL query
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Get Single Seller Details
      tags:
      - Admins
  /admin/sellers/unblock:
    patch:
      consumes:
      - application/json
      description: Using this handler, admin can block a seller
      parameters:
      - description: Seller ID in the URL path
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Block Seller
      tags:
      - Admins
  /admin/sellers/verify:
    patch:
      consumes:
      - application/json
      description: Using this handler, admin can Verify a seller
      parameters:
      - description: Seller ID in the URL path
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Verify Seller
      tags:
      - Admins
  /admin/users/block:
    patch:
      consumes:
      - application/json
      description: using this handler admin can block user
      parameters:
      - description: User ID in the URL path
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Block User
      tags:
      - Admins
  /admin/users/getuser:
    get:
      consumes:
      - application/json
      description: using this handler admin can view user
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 5
        description: Number of items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: All User
      tags:
      - Admins
  /admin/users/unblock:
    patch:
      consumes:
      - application/json
      description: using this handler admin Unblock user
      parameters:
      - description: User ID in the URL path
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Unblock User
      tags:
      - Admins
  /cart:
    delete:
      consumes:
      - application/json
      description: Delete a product from the user's cart.
      parameters:
      - description: Product ID to delete from the cart
        in: query
        name: productID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Product deleted from the cart successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      - Refreshtoken: []
      summary: Delete Item from User Cart
      tags:
      - UserCart
    get:
      consumes:
      - application/json
      description: Retrieve all items in the user's cart.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved user cart items
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      - Refreshtoken: []
      summary: Get User Cart
      tags:
      - UserCart
    post:
      consumes:
      - application/json
      description: Create a user's cart.
      parameters:
      - description: Cart details for creating
        in: body
        name: cart
        required: true
        schema:
          $ref: '#/definitions/requestmodel.Cart'
      produces:
      - application/json
      responses:
        "200":
          description: User cart created successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      - Refreshtoken: []
      summary: Create User Cart
      tags:
      - UserCart
  /cart/decrement/{productID}:
    patch:
      consumes:
      - application/json
      description: Decrease the count of a product in the user's cart.
      parameters:
      - description: Product ID to decrement in the cart
        in: path
        name: productID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Product count decremented in the cart successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      - Refreshtoken: []
      summary: Decrement Product Count in User Cart
      tags:
      - UserCart
  /cart/increment:
    patch:
      consumes:
      - application/json
      description: Increase the count of a product in the user's cart.
      parameters:
      - description: Inventory ID of the product to increment in the cart
        in: query
        name: productID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Product count incremented in the cart successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      - Refreshtoken: []
      summary: Increment Product Count in User Cart
      tags:
      - UserCart
  /filter:
    get:
      consumes:
      - application/json
      description: Filter products based on category, brand, product name, and price
        range.
      parameters:
      - description: Category filter
        in: query
        name: category
        type: string
      - description: Brand filter
        in: query
        name: brand
        type: string
      - description: Product name filter
        in: query
        name: product
        type: string
      - description: Minimum price filter
        in: query
        name: minprice
        type: integer
      - description: Maximum price filter
        in: query
        name: maxprice
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Products filtered successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request. Please provide valid filter criteria.
          schema:
            $ref: '#/definitions/response.Response'
      summary: Filter Products
      tags:
      - User
  /forgotpassword:
    post:
      consumes:
      - application/json
      description: Initiate the process for resetting the password.
      parameters:
      - description: Details for initiating password reset
        in: body
        name: forgotPassword
        required: true
        schema:
          $ref: '#/definitions/requestmodel.ForgotPassword'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset initiated successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Forgot Password
      tags:
      - User
  /login/:
    post:
      consumes:
      - application/json
      description: using this handler User can Login
      parameters:
      - description: User Login details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/requestmodel.UserLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: User Login
      tags:
      - User
  /order:
    get:
      consumes:
      - application/json
      description: Retrieve all orders for the user.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved user orders
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      - Refreshtoken: []
      summary: Get User Orders
      tags:
      - UserOrders
    patch:
      consumes:
      - application/json
      description: Cancel an order for the user.
      parameters:
      - description: Order ID in the query parameter
        in: query
        name: orderID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Order canceled successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      - Refreshtoken: []
      summary: Cancel User Order
      tags:
      - UserOrders
    post:
      consumes:
      - application/json
      description: Create a new order by the user.
      parameters:
      - description: Order details for creating
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/requestmodel.Order'
      produces:
      - application/json
      responses:
        "201":
          description: Order created successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      - Refreshtoken: []
      summary: Create User Order
      tags:
      - UserOrders
  /order/{orderID}:
    get:
      consumes:
      - application/json
      description: Retrieve details about a specific user order.
      parameters:
      - description: Order ID in the URL path
        in: path
        name: orderID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved user order details
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      - Refreshtoken: []
      summary: Get User Order Details
      tags:
      - UserOrders
  /order/invoice:
    get:
      consumes:
      - application/json
      description: Retrieve the invoice for a specific order item.
      parameters:
      - description: ID of the order item for which the invoice is requested
        in: query
        name: orderItemID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Order invoice retrieved successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request. Please provide a valid order item ID.
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      - Refreshtoken: []
      summary: Get Order Invoice
      tags:
      - UserOrders
  /order/return:
    patch:
      consumes:
      - application/json
      description: Initiate a return request for a specific order.
      parameters:
      - description: ID of the order for which return is requested
        in: query
        name: orderID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Return request initiated successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request. Please provide a valid order ID.
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      - Refreshtoken: []
      summary: Initiate Return Request (User)
      tags:
      - UserOrders
  /payment/verify:
    post:
      consumes:
      - application/json
      description: Verify an online payment using the provided details.
      parameters:
      - description: Details for online payment verification
        in: body
        name: verificationDetails
        required: true
        schema:
          $ref: '#/definitions/requestmodel.OnlinePaymentVerification'
      produces:
      - application/json
      responses:
        "200":
          description: Payment verification successful
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request. Please provide valid verification details.
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      - Refreshtoken: []
      summary: Verify Online Payment
      tags:
      - PaymentIntegration
  /profile:
    get:
      consumes:
      - application/json
      description: Retrieve the user's profile.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the user's profile
          schema:
            $ref: '#/definitions/requestmodel.UserDetails'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      - Refreshtoken: []
      summary: Get User
      tags:
      - User Profile
    patch:
      consumes:
      - application/json
      description: Update the user's profile.
      parameters:
      - description: User profile details for updating
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/requestmodel.UserEditProfile'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated the user's profile
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      - Refreshtoken: []
      summary: Update User Profile
      tags:
      - User Profile
  /razorpay:
    get:
      consumes:
      - text/html
      description: Retrieve the Razorpay payment page for the specified user.
      parameters:
      - description: User ID for which the payment page is requested
        in: query
        name: userID
        required: true
        type: integer
      produces:
      - text/html
      responses:
        "200":
          description: HTML page for Razorpay payment
          schema:
            type: string
        "400":
          description: Bad request. Please provide a valid user ID.
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get Razorpay Payment Page
      tags:
      - PaymentIntegration
  /seller:
    get:
      consumes:
      - application/json
      description: Retrieve details for the seller sales.
      produces:
      - application/json
      responses:
        "200":
          description: Details retrieved successfully
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized. Authentication required.
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      - Refreshtoken: []
      summary: Get Seller Dashbord
      tags:
      - Seller
  /seller/accesstoken:
    get:
      consumes:
      - application/json
      description: Verify the validity of a seller's access token.
      parameters:
      - description: Access token to be verified
        in: query
        name: accesstoken
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Access token is valid
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request. Please provide a valid access token.
          schema:
            $ref: '#/definitions/response.Response'
      summary: Verify Access Token (Seller)
      tags:
      - Seller
  /seller/categoryoffer:
    get:
      consumes:
      - application/json
      description: Retrieve all category offers by the seller.
      produces:
      - application/json
      responses:
        "200":
          description: Category offers retrieved successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request. Unable to retrieve category offers.
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      - Refreshtoken: []
      summary: Get Seller Category Offers
      tags:
      - Seller category offers
    patch:
      consumes:
      - application/json
      description: Edit details of a category offer by the seller.
      parameters:
      - description: Details for editing a category offer
        in: body
        name: editDetails
        required: true
        schema:
          $ref: '#/definitions/requestmodel.EditCategoryOffer'
      produces:
      - application/json
      responses:
        "200":
          description: Category offer edited successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request. Please provide valid edit details.
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      - Refreshtoken: []
      summary: Edit Category Offer
      tags:
      - Seller category offers
    post:
      consumes:
      - application/json
      description: Create a new offer for a category by the seller.
      parameters:
      - description: Details for creating a category offer
        in: body
        name: categoryOffer
        required: true
        schema:
          $ref: '#/definitions/requestmodel.CategoryOffer'
      produces:
      - application/json
      responses:
        "201":
          description: Category offer created successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request. Please provide valid details for creating a category
            offer.
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      - Refreshtoken: []
      summary: Create Category Offer
      tags:
      - Seller category offers
  /seller/categoryoffer/block:
    patch:
      consumes:
      - application/json
      description: Block or disable a category offer by the seller.
      parameters:
      - description: ID of the category offer to be blocked
        in: query
        name: categoryOfferID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Category offer blocked successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request. Please provide a valid category offer ID.
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      - Refreshtoken: []
      summary: Block Category Offer
      tags:
      - Seller category offers
  /seller/categoryoffer/delete:
    patch:
      consumes:
      - application/json
      description: Delete a category offer by the seller.
      parameters:
      - description: ID of the category offer to be deleted
        in: query
        name: categoryOfferID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Category offer deleted successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request. Please provide a valid category offer ID.
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      - Refreshtoken: []
      summary: Delete Category Offer
      tags:
      - Seller category offers
  /seller/categoryoffer/unblock:
    patch:
      consumes:
      - application/json
      description: Unblock or enable a previously blocked category offer by the seller.
      parameters:
      - description: ID of the category offer to be unblocked
        in: query
        name: categoryOfferID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Category offer unblocked successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request. Please provide a valid category offer ID.
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      - Refreshtoken: []
      summary: Unblock Category Offer
      tags:
      - Seller category offers
  /seller/login:
    post:
      consumes:
      - application/json
      description: using this handler Seller can Login
      parameters:
      - description: Seller Login details
        in: body
        name: Seller
        required: true
        schema:
          $ref: '#/definitions/requestmodel.SellerLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Seller Login
      tags:
      - Seller
  /seller/order:
    get:
      consumes:
      - application/json
      description: Retrieve a single order for the seller.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the seller order
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      - Refreshtoken: []
      summary: Get Seller Order
      tags:
      - SellerOrders
    patch:
      consumes:
      - application/json
      description: Confirm an order for the seller.
      parameters:
      - description: Order ID in the query parameter
        in: query
        name: orderID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Order confirmed successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      - Refreshtoken: []
      summary: Confirm Seller Order deliverd
      tags:
      - SellerOrders
  /seller/order/{orderID}/cancel:
    patch:
      consumes:
      - application/json
      description: Cancel an order for the seller.
      parameters:
      - description: Order ID in the URL path
        in: path
        name: orderID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Order canceled successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      - Refreshtoken: []
      summary: Cancel Seller Order
      tags:
      - SellerOrders
  /seller/order/cancelled:
    get:
      consumes:
      - application/json
      description: Retrieve a list of cancelled orders by the seller.
      produces:
      - application/json
      responses:
        "200":
          description: Cancelled orders retrieved successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request. Unable to retrieve cancelled orders.
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      - Refreshtoken: []
      summary: Get Cancelled Orders (Seller)
      tags:
      - SellerOrders
  /seller/order/delivered:
    get:
      consumes:
      - application/json
      description: Retrieve delivered orders for the seller.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved seller delivered orders
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      - Refreshtoken: []
      summary: Get Seller Delivered Orders
      tags:
      - SellerOrders
  /seller/order/processing:
    get:
      consumes:
      - application/json
      description: Retrieve still ongoing orders for the seller.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved seller processing orders
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      - Refreshtoken: []
      summary: Get Seller Processing Orders
      tags:
      - SellerOrders
  /seller/products:
    get:
      consumes:
      - application/json
      description: Retrieve a list of seller products.
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 5
        description: Number of items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved seller products
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      - Refreshtoken: []
      summary: Get Seller Products
      tags:
      - Seller Products
    patch:
      consumes:
      - application/json
      description: Edit details of a seller product.
      parameters:
      - description: Updated product details
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/requestmodel.EditInventory'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully edited the seller product
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      - Refreshtoken: []
      summary: Edit Seller Product
      tags:
      - Seller Products
    post:
      consumes:
      - multipart/form-data
      description: Add a new product from the seller.
      parameters:
      - description: Product image for adding
        in: formData
        name: productImage
        required: true
        type: file
      - in: formData
        minimum: 500
        name: batterycapacity
        required: true
        type: integer
      - in: formData
        name: brandID
        required: true
        type: integer
      - in: formData
        name: categoryID
        required: true
        type: integer
      - in: formData
        name: cellularTechnology
        required: true
        type: string
      - in: formData
        minLength: 5
        name: description
        required: true
        type: string
      - in: formData
        maximum: 99
        minimum: 0
        name: discount
        required: true
        type: integer
      - in: formData
        minimum: 0
        name: mrp
        required: true
        type: integer
      - in: formData
        name: os
        required: true
        type: string
      - in: formData
        name: processor
        required: true
        type: string
      - in: formData
        maxLength: 100
        minLength: 3
        name: productname
        required: true
        type: string
      - in: formData
        minimum: 1
        name: ram
        required: true
        type: integer
      - in: formData
        minimum: 2
        name: screensize
        required: true
        type: number
      - in: formData
        minimum: 0
        name: units
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully added the product
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      - Refreshtoken: []
      summary: Add Product
      tags:
      - Seller Products
  /seller/products/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a product by ID.
      parameters:
      - description: Product ID in the URL path
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted the product
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      - Refreshtoken: []
      summary: Delete Product
      tags:
      - Seller Products
    get:
      consumes:
      - application/json
      description: Retrieve details of a single seller product.
      parameters:
      - description: Product ID in the URL path
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the seller product
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      - Refreshtoken: []
      summary: Get Seller Product
      tags:
      - Seller Products
  /seller/products/{id}/block:
    patch:
      consumes:
      - application/json
      description: Block a product from being displayed.
      parameters:
      - description: Product ID in the URL path
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully blocked the product
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      - Refreshtoken: []
      summary: Block Product
      tags:
      - Seller Products
  /seller/products/{id}/unblock:
    patch:
      consumes:
      - application/json
      description: Unblock a product for display.
      parameters:
      - description: Product ID in the URL path
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully unblocked the product
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      - Refreshtoken: []
      summary: Unblock Product
      tags:
      - Seller Products
  /seller/profile:
    get:
      consumes:
      - application/json
      description: Retrieve details of the seller's profile.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the seller's profile
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      - Refreshtoken: []
      summary: Get Seller Profile
      tags:
      - Seller Profile
    patch:
      consumes:
      - application/json
      description: Update the seller's profile.
      parameters:
      - description: Seller profile details for updating
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/requestmodel.SellerEditProfile'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated the seller's profile
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      - Refreshtoken: []
      summary: Update Seller Profile
      tags:
      - Seller Profile
  /seller/report/day:
    get:
      consumes:
      - application/json
      description: Retrieve the seller sales report for the specified year, month,
        and day.
      parameters:
      - description: Year for which the report is requested
        in: query
        name: year
        type: integer
      - description: Month for which the report is requested (1-12)
        in: query
        name: month
        type: integer
      - description: Day for which the report is requested (1-31)
        in: query
        name: day
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Seller sales report retrieved successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request. Please provide a valid year, month, and day.
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      - Refreshtoken: []
      summary: Get Seller Sales Report for a Specific Day
      tags:
      - Seller Sales Report
  /seller/report/days:
    get:
      consumes:
      - application/json
      description: Retrieve the seller sales report for a custom number of days.
      parameters:
      - description: Number of days for which the sales report is requested
        in: query
        name: days
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Seller sales report retrieved successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request. Please provide a valid number of days.
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      - Refreshtoken: []
      summary: Get Seller Sales Report for Custom Number of Days
      tags:
      - Seller Sales Report
  /seller/report/xlsx:
    get:
      consumes:
      - application/json
      description: Generate and download a seller report in XLSX format.
      produces:
      - application/json
      responses:
        "200":
          description: Seller report generated successfully
          schema:
            type: file
        "400":
          description: Bad request. Unable to generate seller report.
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      - Refreshtoken: []
      summary: Generate Seller Report in XLSX Format
      tags:
      - Seller Sales Report
  /seller/signup:
    post:
      consumes:
      - application/json
      description: using this handler Seller can signup
      parameters:
      - description: Seller signup details
        in: body
        name: Seller
        required: true
        schema:
          $ref: '#/definitions/requestmodel.SellerSignup'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Seller Signup
      tags:
      - Seller
  /sendotp:
    post:
      consumes:
      - application/json
      description: Send OTP (One-Time Password) for verification.
      parameters:
      - description: OTP details for sending
        in: body
        name: otp
        required: true
        schema:
          $ref: '#/definitions/requestmodel.SendOtp'
      produces:
      - application/json
      responses:
        "200":
          description: OTP sent successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Send OTP
      tags:
      - User
  /signup/:
    post:
      consumes:
      - application/json
      description: using this handler User can SIgnup
      parameters:
      - description: User Signup details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/requestmodel.UserDetails'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responsemodel.SignupData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: User Signup
      tags:
      - User
  /verifyOTP/:
    post:
      consumes:
      - application/json
      description: using this handler User can send otp
      parameters:
      - description: User otp details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/requestmodel.OtpVerification'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: User Otp verification
      tags:
      - User
  /wallet:
    get:
      consumes:
      - application/json
      description: Retrieve details of the user's wallet.
      produces:
      - application/json
      responses:
        "200":
          description: User wallet details retrieved successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request. Unable to retrieve user wallet details.
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      - Refreshtoken: []
      summary: Get User Wallet
      tags:
      - User Wallet
  /wallet/transaction:
    get:
      consumes:
      - application/json
      description: Retrieve the transactions history of the user's wallet.
      produces:
      - application/json
      responses:
        "200":
          description: User wallet transactions retrieved successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request. Unable to retrieve user wallet transactions.
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      - Refreshtoken: []
      summary: Get User Wallet Transactions
      tags:
      - User Wallet
securityDefinitions:
  BearerTokenAuth:
    in: header
    name: Authorization
    type: apiKey
  Refreshtoken:
    in: header
    name: Refreshtoken
    type: apiKey
swagger: "2.0"
