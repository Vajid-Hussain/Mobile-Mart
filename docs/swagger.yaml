definitions:
  requestmodel.Address:
    properties:
      addressID:
        type: string
      city:
        type: string
      firstName:
        type: string
      landmark:
        type: string
      lastName:
        type: string
      phoneNumber:
        type: string
      pincode:
        minLength: 6
        type: string
      state:
        type: string
      street:
        type: string
      userid:
        type: string
    required:
    - city
    - firstName
    - landmark
    - phoneNumber
    - state
    - street
    type: object
  requestmodel.AdminLoginData:
    properties:
      email:
        type: string
      password:
        minLength: 4
        type: string
    type: object
  requestmodel.EditAddress:
    properties:
      city:
        type: string
      firstName:
        type: string
      id:
        type: string
      landmark:
        type: string
      lastName:
        type: string
      phoneNumber:
        type: string
      pincode:
        minLength: 6
        type: string
      state:
        type: string
      street:
        type: string
      userid:
        type: string
    required:
    - city
    - firstName
    - id
    - landmark
    - lastName
    - phoneNumber
    - pincode
    - state
    - street
    - userid
    type: object
  requestmodel.ForgotPassword:
    properties:
      confirmpassword:
        type: string
      otp:
        type: string
      password:
        minLength: 4
        type: string
    type: object
  requestmodel.OtpVerification:
    properties:
      otp:
        type: string
    type: object
  requestmodel.SellerLogin:
    properties:
      email:
        type: string
      password:
        minLength: 4
        type: string
    type: object
  requestmodel.SellerSignup:
    properties:
      confirmpassword:
        type: string
      description:
        type: string
      email:
        type: string
      gstno:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        minLength: 4
        type: string
    required:
    - description
    - name
    type: object
  requestmodel.SendOtp:
    properties:
      phone:
        type: string
    type: object
  requestmodel.UserDetails:
    properties:
      confirmpassword:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      password:
        minLength: 4
        type: string
      phone:
        type: string
    required:
    - name
    type: object
  requestmodel.UserEditProfile:
    properties:
      confirmpassword:
        type: string
      email:
        type: string
      name:
        type: string
      password:
        minLength: 4
        type: string
      phone:
        type: string
      userid:
        type: string
    required:
    - confirmpassword
    - email
    - name
    - password
    - phone
    - userid
    type: object
  requestmodel.UserLogin:
    properties:
      password:
        minLength: 4
        type: string
      phone:
        type: string
    required:
    - password
    type: object
  response.Response:
    properties:
      error: {}
      message:
        type: string
      result: {}
      status_code:
        type: integer
    type: object
  responsemodel.SignupData:
    properties:
      confirmPassword:
        type: string
      email:
        type: string
      isUserExist:
        type: string
      name:
        type: string
      otp:
        type: string
      password:
        type: string
      phone:
        type: string
      token:
        type: string
    type: object
info:
  contact:
    name: API Support
  description: TechDeck is an E-commerce platform to purchase and sell Electronic
    itmes
  title: Go + Gin Mobile-Mart
paths:
  /address:
    delete:
      consumes:
      - application/json
      description: Delete an address by ID.
      parameters:
      - description: Address ID in the query parameter
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted the address
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      - Refreshtoken: []
      summary: Delete Address
      tags:
      - User Addresses
    get:
      consumes:
      - application/json
      description: Retrieve a list of addresses.
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 5
        description: Number of items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved addresses
          schema:
            items:
              $ref: '#/definitions/requestmodel.Address'
            type: array
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      - Refreshtoken: []
      summary: Get Addresses
      tags:
      - User Addresses
    post:
      consumes:
      - application/json
      description: Add a new address.
      parameters:
      - description: Address object to be added
        in: body
        name: address
        required: true
        schema:
          $ref: '#/definitions/requestmodel.Address'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully added the address
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      - Refreshtoken: []
      summary: Add Address
      tags:
      - User Addresses
  /address/{id}:
    patch:
      consumes:
      - application/json
      description: Update an existing address.
      parameters:
      - description: Address ID in the URL path
        in: path
        name: id
        required: true
        type: string
      - description: Updated address information
        in: body
        name: address
        required: true
        schema:
          $ref: '#/definitions/requestmodel.EditAddress'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated the address
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      - Refreshtoken: []
      summary: Update Address
      tags:
      - User Addresses
  /admin/brand:
    get:
      consumes:
      - application/json
      description: Get a paginated list of brands using this handler.
      parameters:
      - description: Page number for pagination (default 1)
        in: query
        name: page
        required: true
        type: integer
      - description: Number of items to return per page (default 5)
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Paginated list of brands
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid input or validation error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Get Paginated List of Brands
      tags:
      - Brand
    post:
      consumes:
      - application/json
      description: Create a new brand using this handler.
      parameters:
      - description: Name of the brand
        in: formData
        name: name
        required: true
        type: string
      - description: Description of the brand
        in: formData
        name: description
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Brand created successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid input or validation error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Create a Brand
      tags:
      - Brand
  /admin/brand/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing brand using this handler.
      parameters:
      - description: ID of the brand to delete
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Brand deleted successfully
        "400":
          description: Invalid input or validation error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Delete a Brand by ID
      tags:
      - Brand
    patch:
      consumes:
      - application/json
      description: Edit an existing brand using this handler.
      parameters:
      - description: ID of the brand to edit
        in: path
        name: id
        required: true
        type: integer
      - description: Updated name of the brand
        in: formData
        name: name
        required: true
        type: string
      - description: Updated description of the brand
        in: formData
        name: description
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Brand edited successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid input or validation error
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Brand not found
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Edit a Brand by ID
      tags:
      - Brand
  /admin/category:
    delete:
      consumes:
      - application/json
      description: Delete an existing category using this handler.
      parameters:
      - description: ID of the category to delete
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Category deleted successfully
        "400":
          description: Invalid input or validation error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Delete a Category by ID
      tags:
      - Category
    get:
      consumes:
      - application/json
      description: Using this handler, admin can get a list of all categories
      parameters:
      - description: Page number for pagination (default 1)
        in: query
        name: page
        required: true
        type: integer
      - description: Number of items to return per page (default 5)
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Get All Categories
      tags:
      - Category
    post:
      consumes:
      - application/json
      description: Using this handler, admin can add a new category
      parameters:
      - description: Name of the category
        in: query
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Add Category
      tags:
      - Category
  /admin/category/{id}:
    patch:
      consumes:
      - application/json
      description: Edit an existing category using this handler.
      parameters:
      - description: ID of the category to edit
        in: path
        name: id
        required: true
        type: integer
      - description: Updated name of the category
        in: formData
        name: name
        required: true
        type: string
      - description: Updated description of the category
        in: formData
        name: description
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Category edited successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid input or validation error
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Category not found
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Edit a Category by ID
      tags:
      - Category
  /admin/login/:
    post:
      consumes:
      - application/json
      description: using this handler admins can login
      parameters:
      - description: Admin login details
        in: body
        name: admin
        required: true
        schema:
          $ref: '#/definitions/requestmodel.AdminLoginData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Admin login
      tags:
      - Admins
  /admin/seller/block:
    patch:
      consumes:
      - application/json
      description: Using this handler, admin can block a seller
      parameters:
      - description: Seller ID in the URL path
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Block Seller
      tags:
      - Admins
  /admin/sellers/block:
    patch:
      consumes:
      - application/json
      description: Using this handler, admin can block a seller
      parameters:
      - description: Seller ID in the URL path
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Block Seller
      tags:
      - Admins
  /admin/sellers/getsellers:
    get:
      consumes:
      - application/json
      description: Using this handler, admin can get a list of sellers
      parameters:
      - description: Page number for pagination (default 1)
        in: query
        name: page
        required: true
        type: integer
      - description: Number of items to return per page (default 5)
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Get Sellers
      tags:
      - Admins
  /admin/sellers/pending:
    get:
      consumes:
      - application/json
      description: Using this handler, admin can get a list of pending sellers
      parameters:
      - description: Page number for pagination (default 1)
        in: query
        name: page
        required: true
        type: integer
      - description: Number of items to return per page (default 5)
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Get Pending Sellers
      tags:
      - Admins
  /admin/sellers/singleview:
    get:
      consumes:
      - application/json
      description: Using this handler, admin can get details of a single seller
      parameters:
      - description: Seller ID in the URL query
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Get Single Seller Details
      tags:
      - Admins
  /admin/sellers/verify:
    patch:
      consumes:
      - application/json
      description: Using this handler, admin can Verify a seller
      parameters:
      - description: Seller ID in the URL path
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Verify Seller
      tags:
      - Admins
  /admin/user/block:
    patch:
      consumes:
      - application/json
      description: using this handler admin can block user
      parameters:
      - description: User ID in the URL path
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Block User
      tags:
      - Admins
  /admin/user/getuser:
    get:
      consumes:
      - application/json
      description: using this handler admin can view user
      parameters:
      - description: User ID in the URL path
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: All User
      tags:
      - Admins
  /admin/user/unblock:
    patch:
      consumes:
      - application/json
      description: using this handler admin Unblock user
      parameters:
      - description: User ID in the URL path
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Unblock User
      tags:
      - Admins
  /forgotpassword:
    post:
      consumes:
      - application/json
      description: Initiate the process for resetting the password.
      parameters:
      - description: Details for initiating password reset
        in: body
        name: forgotPassword
        required: true
        schema:
          $ref: '#/definitions/requestmodel.ForgotPassword'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset initiated successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Forgot Password
      tags:
      - User
  /profile:
    get:
      consumes:
      - application/json
      description: Retrieve the user's profile.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the user's profile
          schema:
            $ref: '#/definitions/requestmodel.UserDetails'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      - Refreshtoken: []
      summary: Get User Profile
      tags:
      - User Profile
    patch:
      consumes:
      - application/json
      description: Update the user's profile.
      parameters:
      - description: User profile details for updating
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/requestmodel.UserEditProfile'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated the user's profile
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      - Refreshtoken: []
      summary: Update User Profile
      tags:
      - User
  /seller/login:
    post:
      consumes:
      - application/json
      description: using this handler Seller can Login
      parameters:
      - description: Seller Login details
        in: body
        name: Seller
        required: true
        schema:
          $ref: '#/definitions/requestmodel.SellerLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Seller Login
      tags:
      - Seller
  /seller/signup:
    post:
      consumes:
      - application/json
      description: using this handler Seller can signup
      parameters:
      - description: Seller signup details
        in: body
        name: Seller
        required: true
        schema:
          $ref: '#/definitions/requestmodel.SellerSignup'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Seller Signup
      tags:
      - Seller
  /sendotp:
    post:
      consumes:
      - application/json
      description: Send OTP (One-Time Password) for verification.
      parameters:
      - description: OTP details for sending
        in: body
        name: otp
        required: true
        schema:
          $ref: '#/definitions/requestmodel.SendOtp'
      produces:
      - application/json
      responses:
        "200":
          description: OTP sent successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Send OTP
      tags:
      - User
  /user/login/:
    post:
      consumes:
      - application/json
      description: using this handler User can Login
      parameters:
      - description: User Login details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/requestmodel.UserLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: User Login
      tags:
      - User
  /user/signup/:
    post:
      consumes:
      - application/json
      description: using this handler User can SIgnup
      parameters:
      - description: User Signup details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/requestmodel.UserDetails'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responsemodel.SignupData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: User Signup
      tags:
      - User
  /user/verifyOTP/:
    post:
      consumes:
      - application/json
      description: using this handler User can send otp
      parameters:
      - description: User otp details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/requestmodel.OtpVerification'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: User Otp verification
      tags:
      - User
securityDefinitions:
  BearerTokenAuth:
    in: header
    name: Authorization
    type: apiKey
  Refreshtoken:
    in: header
    name: Refreshtoken
    type: apiKey
swagger: "2.0"
