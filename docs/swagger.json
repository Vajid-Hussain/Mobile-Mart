{
    "swagger": "2.0",
    "info": {
        "description": "Mobile Mart - Your Ultimate Mobile Phone Shopping API ðŸ“±ðŸ›’",
        "title": "Go + Gin Mobile-Mart",
        "contact": {
            "name": "API Support"
        }
    },
    "paths": {
        "/": {
            "get": {
                "description": "Retrieve a list of products.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get Seller Products",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 5,
                        "description": "Number of items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved products",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/accesstoken": {
            "get": {
                "description": "Verify the validity of an access token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Verify Access Token (User)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Access token to be verified",
                        "name": "accesstoken",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Access token is valid",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request. Please provide a valid access token.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/address": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "Refreshtoken": []
                    }
                ],
                "description": "Retrieve a list of addresses.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Addresses"
                ],
                "summary": "Get Addresses",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 5,
                        "description": "Number of items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved addresses",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/requestmodel.Address"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "Refreshtoken": []
                    }
                ],
                "description": "Add a new address.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Addresses"
                ],
                "summary": "Add Address",
                "parameters": [
                    {
                        "description": "Address object to be added",
                        "name": "address",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestmodel.Address"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully added the address",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "Refreshtoken": []
                    }
                ],
                "description": "Delete an address by ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Addresses"
                ],
                "summary": "Delete Address",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Address ID in the query parameter",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted the address",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "Refreshtoken": []
                    }
                ],
                "description": "Update an existing address.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Addresses"
                ],
                "summary": "Update Address",
                "parameters": [
                    {
                        "description": "Updated address information",
                        "name": "address",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestmodel.EditAddress"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated the address",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Retrieve details for the admin.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admins"
                ],
                "summary": "Get Dashbord Details",
                "responses": {
                    "200": {
                        "description": "Admin details retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. Authentication required.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/brand": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Get a paginated list of brands using this handler.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Brand"
                ],
                "summary": "Get Paginated List of Brands",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number for pagination (default 1)",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 5,
                        "description": "Number of items to return per page (default 5)",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Paginated list of brands",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid input or validation error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Create a new brand using this handler.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Brand"
                ],
                "summary": "Create a Brand",
                "parameters": [
                    {
                        "description": "Name of the brand",
                        "name": "Brand",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestmodel.Brand"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Brand created successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid input or validation error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/brand/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "Refreshtoken": []
                    }
                ],
                "description": "Delete an existing brand using this handler.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Brand"
                ],
                "summary": "Delete a Brand by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the brand to delete",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Brand deleted successfully"
                    },
                    "400": {
                        "description": "Invalid input or validation error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Edit an existing brand using this handler.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Brand"
                ],
                "summary": "Edit a Brand by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the brand to edit",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated name of the brand",
                        "name": "name",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestmodel.BrandDetails"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Brand edited successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid input or validation error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "Brand not found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/category": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Using this handler, admin can get a list of all categories",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Category"
                ],
                "summary": "Get All Categories",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number for pagination (default 1)",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 5,
                        "description": "Number of items to return per page (default 5)",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Using this handler, admin can add a new category",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Category"
                ],
                "summary": "Add Category",
                "parameters": [
                    {
                        "description": "Details of the category",
                        "name": "Details",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestmodel.Category"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Delete an existing category using this handler.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Category"
                ],
                "summary": "Delete a Category by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the category to delete",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Category deleted successfully"
                    },
                    "400": {
                        "description": "Invalid input or validation error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/category/{id}": {
            "patch": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Edit an existing category using this handler.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Category"
                ],
                "summary": "Edit a Category by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the category to edit",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated category",
                        "name": "category",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestmodel.CategoryDetails"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Category edited successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid input or validation error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/coupon": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Retrieve a list of coupons for the admin.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Coupons"
                ],
                "summary": "Get Coupons (Admin)",
                "responses": {
                    "200": {
                        "description": "Coupons retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request. Unable to retrieve coupons.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Create a new coupon by the admin.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Coupons"
                ],
                "summary": "Create Coupon (Admin)",
                "parameters": [
                    {
                        "description": "Coupon details to be created",
                        "name": "coupon",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestmodel.Coupon"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Coupon created successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request. Unable to create the coupon.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/coupon/block": {
            "patch": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Block a coupon by the admin.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Coupons"
                ],
                "summary": "Block Coupon (Admin)",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the coupon to be blocked",
                        "name": "couponID",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Coupon blocked successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request. Please provide a valid coupon ID.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/coupon/unblock": {
            "patch": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Unblock a coupon by the admin.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Coupons"
                ],
                "summary": "Unblock Coupon (Admin)",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the coupon to be unblocked",
                        "name": "couponID",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Coupon unblocked successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request. Please provide a valid coupon ID.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/login/": {
            "post": {
                "description": "using this handler admins can login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admins"
                ],
                "summary": "Admin login",
                "parameters": [
                    {
                        "description": "Admin login details",
                        "name": "admin",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestmodel.AdminLoginData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/seller/block": {
            "patch": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Using this handler, admin can block a seller",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admins"
                ],
                "summary": "Block Seller",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Seller ID in the URL path",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/sellers/block": {
            "patch": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Using this handler, admin can block a seller",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admins"
                ],
                "summary": "Block Seller",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Seller ID in the URL path",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/sellers/getsellers": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Using this handler, admin can get a list of sellers",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admins"
                ],
                "summary": "Get Sellers",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number for pagination (default 1)",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of items to return per page (default 5)",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/sellers/pending": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Using this handler, admin can get a list of pending sellers",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admins"
                ],
                "summary": "Get Pending Sellers",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number for pagination (default 1)",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of items to return per page (default 5)",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/sellers/singleview": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Using this handler, admin can get details of a single seller",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admins"
                ],
                "summary": "Get Single Seller Details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Seller ID in the URL query",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/sellers/verify": {
            "patch": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Using this handler, admin can Verify a seller",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admins"
                ],
                "summary": "Verify Seller",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Seller ID in the URL path",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/users/block": {
            "patch": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "using this handler admin can block user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admins"
                ],
                "summary": "Block User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID in the URL path",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/users/getuser": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "using this handler admin can view user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admins"
                ],
                "summary": "All User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID in the URL path",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/users/unblock": {
            "patch": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "using this handler admin Unblock user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admins"
                ],
                "summary": "Unblock User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID in the URL path",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/cart": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "Refreshtoken": []
                    }
                ],
                "description": "Retrieve all items in the user's cart.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserCart"
                ],
                "summary": "Get User Cart",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user cart items",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "Refreshtoken": []
                    }
                ],
                "description": "Create a user's cart.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserCart"
                ],
                "summary": "Create User Cart",
                "parameters": [
                    {
                        "description": "Cart details for creating",
                        "name": "cart",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestmodel.Cart"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User cart created successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "Refreshtoken": []
                    }
                ],
                "description": "Delete a product from the user's cart.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserCart"
                ],
                "summary": "Delete Item from User Cart",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID to delete from the cart",
                        "name": "productID",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product deleted from the cart successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/cart/decrement/{productID}": {
            "patch": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "Refreshtoken": []
                    }
                ],
                "description": "Decrease the count of a product in the user's cart.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserCart"
                ],
                "summary": "Decrement Product Count in User Cart",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID to decrement in the cart",
                        "name": "productID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product count decremented in the cart successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/cart/increment": {
            "patch": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "Refreshtoken": []
                    }
                ],
                "description": "Increase the count of a product in the user's cart.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserCart"
                ],
                "summary": "Increment Product Count in User Cart",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Inventory ID of the product to increment in the cart",
                        "name": "inventoryid",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product count incremented in the cart successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/filter": {
            "get": {
                "description": "Filter products based on category, brand, product name, and price range.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Filter Products",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Category filter",
                        "name": "category",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Brand filter",
                        "name": "brand",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Product name filter",
                        "name": "product",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Minimum price filter",
                        "name": "minprice",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Maximum price filter",
                        "name": "maxprice",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Products filtered successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request. Please provide valid filter criteria.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/forgotpassword": {
            "post": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Initiate the process for resetting the password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Forgot Password",
                "parameters": [
                    {
                        "description": "Details for initiating password reset",
                        "name": "forgotPassword",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestmodel.ForgotPassword"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password reset initiated successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/login/": {
            "post": {
                "description": "using this handler User can Login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "User Login",
                "parameters": [
                    {
                        "description": "User Login details",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestmodel.UserLogin"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/order": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "Refreshtoken": []
                    }
                ],
                "description": "Retrieve all orders for the user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserOrders"
                ],
                "summary": "Get User Orders",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user orders",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "Refreshtoken": []
                    }
                ],
                "description": "Create a new order by the user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserOrders"
                ],
                "summary": "Create User Order",
                "parameters": [
                    {
                        "description": "Order details for creating",
                        "name": "order",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestmodel.Order"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Order created successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "Refreshtoken": []
                    }
                ],
                "description": "Cancel an order for the user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserOrders"
                ],
                "summary": "Cancel User Order",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Order ID in the query parameter",
                        "name": "orderID",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order canceled successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/order/invoice": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "Refreshtoken": []
                    }
                ],
                "description": "Retrieve the invoice for a specific order item.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserOrders"
                ],
                "summary": "Get Order Invoice",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the order item for which the invoice is requested",
                        "name": "orderItemID",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order invoice retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request. Please provide a valid order item ID.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/order/return": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "Refreshtoken": []
                    }
                ],
                "description": "Initiate a return request for a specific order.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserOrders"
                ],
                "summary": "Initiate Return Request (User)",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the order for which return is requested",
                        "name": "orderID",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return request initiated successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request. Please provide a valid order ID.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/order/{orderID}": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "Refreshtoken": []
                    }
                ],
                "description": "Retrieve details about a specific user order.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserOrders"
                ],
                "summary": "Get User Order Details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Order ID in the URL path",
                        "name": "orderID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user order details",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/payment/verify": {
            "post": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "Verify an online payment using the provided details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PaymentIntegration"
                ],
                "summary": "Verify Online Payment",
                "parameters": [
                    {
                        "description": "Details for online payment verification",
                        "name": "verificationDetails",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestmodel.OnlinePaymentVerification"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Payment verification successful",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request. Please provide valid verification details.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/profile": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "Refreshtoken": []
                    }
                ],
                "description": "Retrieve the user's profile.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Profile"
                ],
                "summary": "Get User",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the user's profile",
                        "schema": {
                            "$ref": "#/definitions/requestmodel.UserDetails"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "Refreshtoken": []
                    }
                ],
                "description": "Update the user's profile.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Profile"
                ],
                "summary": "Update User Profile",
                "parameters": [
                    {
                        "description": "User profile details for updating",
                        "name": "profile",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestmodel.UserEditProfile"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated the user's profile",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/razorpay": {
            "get": {
                "description": "Retrieve the Razorpay payment page for the specified user.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "PaymentIntegration"
                ],
                "summary": "Get Razorpay Payment Page",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID for which the payment page is requested",
                        "name": "userID",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "HTML page for Razorpay payment",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request. Please provide a valid user ID.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/seller": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "Refreshtoken": []
                    }
                ],
                "description": "Retrieve details for the seller.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seller"
                ],
                "summary": "Get Seller Details",
                "responses": {
                    "200": {
                        "description": "Details retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. Authentication required.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/seller/accesstoken": {
            "get": {
                "description": "Verify the validity of a seller's access token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seller"
                ],
                "summary": "Verify Access Token (Seller)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Access token to be verified",
                        "name": "accesstoken",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Access token is valid",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request. Please provide a valid access token.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/seller/categoryoffer": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "Refreshtoken": []
                    }
                ],
                "description": "Retrieve all category offers by the seller.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seller category offers"
                ],
                "summary": "Get Seller Category Offers",
                "responses": {
                    "200": {
                        "description": "Category offers retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request. Unable to retrieve category offers.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "Refreshtoken": []
                    }
                ],
                "description": "Create a new offer for a category by the seller.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seller category offers"
                ],
                "summary": "Create Category Offer",
                "parameters": [
                    {
                        "description": "Details for creating a category offer",
                        "name": "categoryOffer",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestmodel.CategoryOffer"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Category offer created successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request. Please provide valid details for creating a category offer.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "Refreshtoken": []
                    }
                ],
                "description": "Edit details of a category offer by the seller.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seller category offers"
                ],
                "summary": "Edit Category Offer",
                "parameters": [
                    {
                        "description": "Details for editing a category offer",
                        "name": "editDetails",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestmodel.EditCategoryOffer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Category offer edited successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request. Please provide valid edit details.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/seller/categoryoffer/block": {
            "patch": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "Refreshtoken": []
                    }
                ],
                "description": "Block or disable a category offer by the seller.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seller category offers"
                ],
                "summary": "Block Category Offer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the category offer to be blocked",
                        "name": "categoryOfferID",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Category offer blocked successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request. Please provide a valid category offer ID.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/seller/categoryoffer/delete": {
            "patch": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "Refreshtoken": []
                    }
                ],
                "description": "Delete a category offer by the seller.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seller category offers"
                ],
                "summary": "Delete Category Offer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the category offer to be deleted",
                        "name": "categoryOfferID",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Category offer deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request. Please provide a valid category offer ID.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/seller/categoryoffer/unblock": {
            "patch": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "Refreshtoken": []
                    }
                ],
                "description": "Unblock or enable a previously blocked category offer by the seller.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seller category offers"
                ],
                "summary": "Unblock Category Offer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the category offer to be unblocked",
                        "name": "categoryOfferID",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Category offer unblocked successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request. Please provide a valid category offer ID.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/seller/login": {
            "post": {
                "description": "using this handler Seller can Login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seller"
                ],
                "summary": "Seller Login",
                "parameters": [
                    {
                        "description": "Seller Login details",
                        "name": "Seller",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestmodel.SellerLogin"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/seller/order": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "Refreshtoken": []
                    }
                ],
                "description": "Retrieve a single order for the seller.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SellerOrders"
                ],
                "summary": "Get Seller Order",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the seller order",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "Refreshtoken": []
                    }
                ],
                "description": "Confirm an order for the seller.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SellerOrders"
                ],
                "summary": "Confirm Seller Order",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Order ID in the query parameter",
                        "name": "orderID",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order confirmed successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/seller/order/cancelled": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "Refreshtoken": []
                    }
                ],
                "description": "Retrieve a list of cancelled orders by the seller.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SellerOrders"
                ],
                "summary": "Get Cancelled Orders (Seller)",
                "responses": {
                    "200": {
                        "description": "Cancelled orders retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request. Unable to retrieve cancelled orders.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/seller/order/delivered": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "Refreshtoken": []
                    }
                ],
                "description": "Retrieve delivered orders for the seller.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SellerOrders"
                ],
                "summary": "Get Seller Delivered Orders",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved seller delivered orders",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/seller/order/processing": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "Refreshtoken": []
                    }
                ],
                "description": "Retrieve still ongoing orders for the seller.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SellerOrders"
                ],
                "summary": "Get Seller Processing Orders",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved seller processing orders",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/seller/order/{orderID}/cancel": {
            "patch": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "Refreshtoken": []
                    }
                ],
                "description": "Cancel an order for the seller.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SellerOrders"
                ],
                "summary": "Cancel Seller Order",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Order ID in the URL path",
                        "name": "orderID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order canceled successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/seller/products": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "Refreshtoken": []
                    }
                ],
                "description": "Retrieve a list of seller products.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seller Products"
                ],
                "summary": "Get Seller Products",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 5,
                        "description": "Number of items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved seller products",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "Refreshtoken": []
                    }
                ],
                "description": "Add a new product from the seller.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seller Products"
                ],
                "summary": "Add Product",
                "parameters": [
                    {
                        "type": "file",
                        "description": "Product image for adding",
                        "name": "productImage",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "minimum": 500,
                        "type": "integer",
                        "name": "batterycapacity",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "name": "brandID",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "name": "categoryID",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "cellularTechnology",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "minLength": 5,
                        "type": "string",
                        "name": "description",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "maximum": 99,
                        "minimum": 0,
                        "type": "integer",
                        "name": "discount",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "name": "mrp",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "os",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "processor",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "maxLength": 100,
                        "minLength": 3,
                        "type": "string",
                        "name": "productname",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "name": "ram",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "minimum": 2,
                        "type": "number",
                        "name": "screensize",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "name": "sellerID",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "name": "units",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully added the product",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "Refreshtoken": []
                    }
                ],
                "description": "Edit details of a seller product.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seller Products"
                ],
                "summary": "Edit Seller Product",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID in the query parameter",
                        "name": "productid",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Updated product details",
                        "name": "product",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestmodel.EditInventory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully edited the seller product",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/seller/products/{id}": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "Refreshtoken": []
                    }
                ],
                "description": "Retrieve details of a single seller product.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seller Products"
                ],
                "summary": "Get Seller Product",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID in the URL path",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the seller product",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "Refreshtoken": []
                    }
                ],
                "description": "Delete a product by ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seller Products"
                ],
                "summary": "Delete Product",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID in the URL path",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted the product",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/seller/products/{id}/block": {
            "patch": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "Refreshtoken": []
                    }
                ],
                "description": "Block a product from being displayed.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seller Products"
                ],
                "summary": "Block Product",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID in the URL path",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully blocked the product",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/seller/products/{id}/unblock": {
            "patch": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "Refreshtoken": []
                    }
                ],
                "description": "Unblock a product for display.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seller Products"
                ],
                "summary": "Unblock Product",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID in the URL path",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully unblocked the product",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/seller/profile": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "Refreshtoken": []
                    }
                ],
                "description": "Retrieve details of the seller's profile.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seller Profile"
                ],
                "summary": "Get Seller Profile",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the seller's profile",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "Refreshtoken": []
                    }
                ],
                "description": "Update the seller's profile.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seller Profile"
                ],
                "summary": "Update Seller Profile",
                "parameters": [
                    {
                        "description": "Seller profile details for updating",
                        "name": "profile",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestmodel.SellerEditProfile"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated the seller's profile",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/seller/report/day": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "Refreshtoken": []
                    }
                ],
                "description": "Retrieve the seller sales report for the specified year, month, and day.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seller Sales Report"
                ],
                "summary": "Get Seller Sales Report for a Specific Day",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Year for which the report is requested",
                        "name": "year",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Month for which the report is requested (1-12)",
                        "name": "month",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Day for which the report is requested (1-31)",
                        "name": "day",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Seller sales report retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request. Please provide a valid year, month, and day.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/seller/report/days": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "Refreshtoken": []
                    }
                ],
                "description": "Retrieve the seller sales report for a custom number of days.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seller Sales Report"
                ],
                "summary": "Get Seller Sales Report for Custom Number of Days",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of days for which the sales report is requested",
                        "name": "days",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Seller sales report retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request. Please provide a valid number of days.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/seller/report/xlsx": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "Refreshtoken": []
                    }
                ],
                "description": "Generate and download a seller report in XLSX format.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seller Sales Report"
                ],
                "summary": "Generate Seller Report in XLSX Format",
                "responses": {
                    "200": {
                        "description": "Seller report generated successfully",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "400": {
                        "description": "Bad request. Unable to generate seller report.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/seller/signup": {
            "post": {
                "description": "using this handler Seller can signup",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seller"
                ],
                "summary": "Seller Signup",
                "parameters": [
                    {
                        "description": "Seller signup details",
                        "name": "Seller",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestmodel.SellerSignup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/sendotp": {
            "post": {
                "description": "Send OTP (One-Time Password) for verification.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Send OTP",
                "parameters": [
                    {
                        "description": "OTP details for sending",
                        "name": "otp",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestmodel.SendOtp"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP sent successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/signup/": {
            "post": {
                "description": "using this handler User can SIgnup",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "User Signup",
                "parameters": [
                    {
                        "description": "User Signup details",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestmodel.UserDetails"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responsemodel.SignupData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/verifyOTP/": {
            "post": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    }
                ],
                "description": "using this handler User can send otp",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "User Otp verification",
                "parameters": [
                    {
                        "description": "User otp details",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestmodel.OtpVerification"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/wallet": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "Refreshtoken": []
                    }
                ],
                "description": "Retrieve details of the user's wallet.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Wallet"
                ],
                "summary": "Get User Wallet",
                "responses": {
                    "200": {
                        "description": "User wallet details retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request. Unable to retrieve user wallet details.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/wallet/transaction": {
            "get": {
                "security": [
                    {
                        "BearerTokenAuth": []
                    },
                    {
                        "Refreshtoken": []
                    }
                ],
                "description": "Retrieve the transactions history of the user's wallet.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Wallet"
                ],
                "summary": "Get User Wallet Transactions",
                "responses": {
                    "200": {
                        "description": "User wallet transactions retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request. Unable to retrieve user wallet transactions.",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "requestmodel.Address": {
            "type": "object",
            "required": [
                "city",
                "firstName",
                "landmark",
                "phoneNumber",
                "state",
                "street"
            ],
            "properties": {
                "addressID": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "landmark": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "phoneNumber": {
                    "type": "string"
                },
                "pincode": {
                    "type": "string",
                    "minLength": 6
                },
                "state": {
                    "type": "string"
                },
                "street": {
                    "type": "string"
                },
                "userid": {
                    "type": "string"
                }
            }
        },
        "requestmodel.AdminLoginData": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 4
                }
            }
        },
        "requestmodel.Brand": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "requestmodel.BrandDetails": {
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "requestmodel.Cart": {
            "type": "object",
            "required": [
                "inventoryid"
            ],
            "properties": {
                "cartid userid": {
                    "type": "string"
                },
                "inventoryid": {
                    "type": "string"
                },
                "price": {
                    "type": "integer"
                },
                "quantity": {
                    "type": "integer"
                }
            }
        },
        "requestmodel.Category": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "requestmodel.CategoryDetails": {
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "requestmodel.CategoryOffer": {
            "type": "object",
            "required": [
                "category_discount",
                "category_id",
                "title",
                "validity"
            ],
            "properties": {
                "category_discount": {
                    "type": "integer",
                    "maximum": 99,
                    "minimum": 1
                },
                "category_id": {
                    "type": "string"
                },
                "seller_id": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "validity": {
                    "type": "integer",
                    "minimum": 0
                }
            }
        },
        "requestmodel.Coupon": {
            "type": "object",
            "required": [
                "name",
                "type"
            ],
            "properties": {
                "discount": {
                    "type": "integer",
                    "maximum": 100,
                    "minimum": 1
                },
                "expire_date": {
                    "type": "integer",
                    "minimum": 1
                },
                "maximum_allowed": {
                    "type": "integer"
                },
                "minimum_required": {
                    "type": "integer",
                    "minimum": 0
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "requestmodel.EditAddress": {
            "type": "object",
            "required": [
                "addressID",
                "city",
                "firstName",
                "landmark",
                "lastName",
                "phoneNumber",
                "pincode",
                "state",
                "street"
            ],
            "properties": {
                "addressID": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "landmark": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "phoneNumber": {
                    "type": "string"
                },
                "pincode": {
                    "type": "string",
                    "minLength": 6
                },
                "state": {
                    "type": "string"
                },
                "street": {
                    "type": "string"
                }
            }
        },
        "requestmodel.EditCategoryOffer": {
            "type": "object",
            "required": [
                "category_discount",
                "title"
            ],
            "properties": {
                "category_discount": {
                    "type": "integer",
                    "maximum": 99,
                    "minimum": 1
                },
                "id": {
                    "type": "string"
                },
                "sellerID": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "validity": {
                    "type": "integer"
                }
            }
        },
        "requestmodel.EditInventory": {
            "type": "object",
            "required": [
                "discount",
                "id",
                "mrp",
                "units"
            ],
            "properties": {
                "discount": {
                    "type": "integer",
                    "maximum": 99,
                    "minimum": 0
                },
                "id": {
                    "type": "string"
                },
                "mrp": {
                    "type": "integer",
                    "minimum": 0
                },
                "saleprice": {
                    "type": "integer"
                },
                "units": {
                    "type": "integer",
                    "minimum": 0
                }
            }
        },
        "requestmodel.ForgotPassword": {
            "type": "object",
            "properties": {
                "confirmpassword": {
                    "type": "string"
                },
                "otp": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 4
                }
            }
        },
        "requestmodel.OnlinePaymentVerification": {
            "type": "object",
            "required": [
                "order_id",
                "payment_id",
                "signature"
            ],
            "properties": {
                "order_id": {
                    "type": "string"
                },
                "payment_id": {
                    "type": "string"
                },
                "signature": {
                    "type": "string"
                }
            }
        },
        "requestmodel.Order": {
            "type": "object",
            "required": [
                "address",
                "payment"
            ],
            "properties": {
                "address": {
                    "type": "string"
                },
                "coupon": {
                    "type": "string"
                },
                "payment": {
                    "type": "string"
                },
                "userid": {
                    "type": "string"
                }
            }
        },
        "requestmodel.OtpVerification": {
            "type": "object",
            "properties": {
                "otp": {
                    "type": "string"
                }
            }
        },
        "requestmodel.SellerEditProfile": {
            "type": "object",
            "required": [
                "confirmpassword",
                "description",
                "email",
                "gstno",
                "id",
                "name",
                "password"
            ],
            "properties": {
                "confirmpassword": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "gstno": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 4
                }
            }
        },
        "requestmodel.SellerLogin": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 4
                }
            }
        },
        "requestmodel.SellerSignup": {
            "type": "object",
            "required": [
                "description",
                "name"
            ],
            "properties": {
                "confirmpassword": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "gstno": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 4
                }
            }
        },
        "requestmodel.SendOtp": {
            "type": "object",
            "properties": {
                "phone": {
                    "type": "string"
                }
            }
        },
        "requestmodel.UserDetails": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "confirmpassword": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 4
                },
                "phone": {
                    "type": "string"
                },
                "referalCode": {
                    "type": "string"
                }
            }
        },
        "requestmodel.UserEditProfile": {
            "type": "object",
            "required": [
                "email",
                "name",
                "phone",
                "userid"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "userid": {
                    "type": "string"
                }
            }
        },
        "requestmodel.UserLogin": {
            "type": "object",
            "required": [
                "password"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "minLength": 4
                },
                "phone": {
                    "type": "string"
                }
            }
        },
        "response.Response": {
            "type": "object",
            "properties": {
                "error": {},
                "message": {
                    "type": "string"
                },
                "result": {},
                "status_code": {
                    "type": "integer"
                }
            }
        },
        "responsemodel.SignupData": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "isUserExist": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "otp": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "referalCode": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                },
                "userID": {
                    "type": "string"
                },
                "walletBelance": {
                    "type": "integer"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerTokenAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        },
        "Refreshtoken": {
            "type": "apiKey",
            "name": "Refreshtoken",
            "in": "header"
        }
    }
}